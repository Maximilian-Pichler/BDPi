---

- hosts: servers
  gather_facts: yes
  become: yes

  vars:
    home_dir: "/home/{{ ansible_user }}"

  tasks:
    # SET UP DIRECTORIES #
    ###################################################################################################################
    - name: create directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - /usr/local/share/doc
        - "{{ home_dir }}/tmp"
        - "{{ home_dir }}/kafka"
        - "{{ home_dir }}/kafka/data"
        - "{{ home_dir }}/kafka/data/kafka"
        - "{{ home_dir }}/kafka/data/zookeeper"
        - "{{ home_dir }}/spark"
        - "{{ home_dir }}/projects"

    - name: mount external drive
      lineinfile:
        dest: /etc/fstab
        line: "UUID={{ uuid }} {{ home_dir }}/projects {{ ftype }} defaults,auto,users,rw,nofail 0 0"
      when: (uuid is defined) and (uuid|length > 0)


    # OVERCLOCK #
    ###################################################################################################################        
    - name: add overclock if not set
      lineinfile:
        dest: /boot/firmware/config.txt
        line: "{{ item }}"
      with_items:
        - arm_freq=2000
        - over_voltage=6
      notify: reboot


    # UPDATE & INSTALL LIBRARIES #
    ###################################################################################################################  
    - name: update and upgrade apt packages
      apt:
        upgrade: 'yes'
        update_cache: yes
        cache_valid_time: 86400 # One day

    - name: install prequisite libraries
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - build-essential
        - make
        - checkinstall
        - default-jdk
        - libssl-dev 
        - libffi-dev 
        - python3-dev
        - libmariadb3
        - libmariadb-dev
        - libsqlite3-dev
        - libsasl2-dev 
        - libldap2-dev
        - mariadb-server
        - python3-pip
        #- python-pexpect # not available on ubuntu?
        #- python-mysqldb # not available on ubuntu?
        #- python-openssl # not available on ubuntu?
        #- python-websocket # not available on ubuntu?
        - sqlite3 
        - git
        - virtualenv
        - samba
        - samba-common-bin
        - wget
        - curl
        - apt-transport-https
        - ca-certificates
        - docker.io

    ## build librdkafka library from source (needed for kafka-confluent)
    - name: read & check installed packages
      package_facts:
        manager: "auto"

    - name: download and unzip source-code for librdkafka if not installed
      unarchive:
        src: http://mirrordirector.raspbian.org/raspbian/pool/main/libr/librdkafka/librdkafka_1.6.0.orig.tar.gz
        dest: "{{ home_dir }}/tmp"
        remote_src: yes
      when: "'librdkafka' not in ansible_facts.packages"
    
    - name: configure librdkafka installation
      command: ./configure
      args:
        chdir: "{{ home_dir }}/tmp/librdkafka-1.6.0"
      when: "'librdkafka' not in ansible_facts.packages"

    - name: build librdkafka from source
      command: make
      args:
        chdir: "{{ home_dir }}/tmp/librdkafka-1.6.0"
      when: 
        - "'librdkafka' not in ansible_facts.packages"

    - name: install librdkafka
      become: yes
      command: "checkinstall -y"
      args:
        chdir: "{{ home_dir }}/tmp/librdkafka-1.6.0"
      when: "'librdkafka' not in ansible_facts.packages"

    - name: remove build directory
      file:
        path: "{{ home_dir }}/tmp/librdkafka_1.6.0"
        state: absent
      when: "'librdkafka' not in ansible_facts.packages"

    - name: remove source-code
      file:
        path: "{{ home_dir }}/tmp/librdkafka_1.6.0.orig.tar.gz"
        state: absent
      when: "'librdkafka' not in ansible_facts.packages"


    # SET UP SAMBA #
    ###################################################################################################################  
    - name: configure samba
      lineinfile:
        dest: /etc/samba/smb.conf
        line: "{{ item }}"
      with_items:
        - '[projects]'
        - 'path = {{ home_dir }}/projects'
        - 'writeable=Yes'
        - 'create mask=0777'
        - 'directory mask=0777'
        - 'public=no'
    
    - name: create samba user
      expect:
        command: 'smbpasswd -a {{ ansible_user }}'
        responses:
            'New SMB password': 'abcd'
            'Retype new SMB password': 'abcd'
        echo: true
      no_log: false

    - name: restart samba
      command: 'systemctl restart smbd'

    
    # DEVELOPMENT #
    ###################################################################################################################  
    ## ARCHICONDA
    - name: check if conda binary is present
      stat: path={{ home_dir }}/archiconda3/bin/conda
      register: conda

    - name: Download Archiconda3
      get_url:
        url: https://github.com/Archiconda/build-tools/releases/download/0.2.3/Archiconda3-0.2.3-Linux-aarch64.sh
        dest: "{{ home_dir }}/tmp/Archiconda3-0.2.3-Linux-aarch64.sh"
        mode: '755'
      when: conda.stat.exists == False

    - name: install Archiconda3
      expect:
        command: "{{ home_dir }}/tmp/Archiconda3-0.2.3-Linux-aarch64.sh"
        responses:
            'continue': '\n'
            '27': 'yes'
            'bashrc': 'no'
            'below': '{{ home_dir }}/archiconda3'
        echo: true
      when: conda.stat.exists == False
      no_log: false


    # STREAMING ENVIRONMENT SETUP #
    ###################################################################################################################  
    - name: check if streaming environment is present
      stat: path="{{ home_dir }}/archiconda3/envs/streaming/bin/python"
      register: streaming

    - name: Copy requirements.txt
      template: 
        src: requirements.txt
        dest: "{{ home_dir }}/tmp/requirements.txt"
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0775'
        backup: no

    - name: setup streaming conda-env
      expect:
        command: "{{ home_dir }}/archiconda3/bin/conda env create --name streaming python=3.7.1 --file {{ home_dir }}/tmp/requirements.txt"
        responses:
            'Proceed': 'y'
        echo: true
        timeout: 36000
      when: streaming.stat.exists == False
      no_log: false 

    - name: install the package, force upgrade
      pip: 
        name: pip
        executable: "{{ home_dir }}/archiconda3/envs/streaming/bin/pip"
        state: latest

    - name: Remove requirements.txt
      file:
        path: "/tmp/requirements.txt"
        state: absent

    - name: configure auto-activate
      lineinfile:
        dest: "{{ home_dir }}/.bashrc"
        line: ". {{ home_dir }}/archiconda3/etc/profile.d/conda.sh"


    ### CONFIGURE JUPYTER SERVICE
    - name: Copy the jupyter.service file
      template: 
        src: jupyter.txt
        dest: /etc/systemd/system/jupyter.service
        backup: no
    
    - name: set User
      lineinfile:
        path: "/etc/systemd/system/jupyter.service"
        regexp: '^User\='
        line: 'User={{ ansible_user }}'

    - name: set PATH
      lineinfile:
        path: "/etc/systemd/system/jupyter.service"
        regexp: '^Environment\='
        line: 'Environment="PATH={{ ansible_env.PATH }}:{{ home_dir }}/archiconda3/envs/streaming/bin"'
    
    - name: set Workirectory
      lineinfile:
        path: "/etc/systemd/system/jupyter.service"
        regexp: '^WorkDirectory\='
        line: "WorkDirectory={{ home_dir }}/projects"

    - name: set jupyter executable
      lineinfile:
        path: "/etc/systemd/system/jupyter.service"
        regexp: 'ExecStart\='
        line: "ExecStart={{ home_dir }}/archiconda3/envs/streaming/bin/jupyter lab --ip={{ansible_default_ipv4.address}} --port=8881 --NotebookApp.token=abcd --notebook-dir={{ home_dir }}/projects"

    - name: Restart jupyter and enable service at startup
      systemd:
        state: restarted
        enabled: yes
        daemon_reload: yes
        name: jupyter


    ## SETUP MARIA-DB
    - name: install PyMySQL
      command: /usr/bin/pip3 install PyMySQL

    - name: Case insensitive password string match
      expect:
        command: mysql_secure_installation
        responses:
            'Enter current password for root \(enter for none\)': '\n'
            'Switch to unix_socket authentication \[Y/n\]': 'n'
            'Set root password\? \[Y/n\]': 'n'
            'Change the root password\? \[Y/n\]': 'n'
            'Remove anonymous users\? \[Y/n\]': 'n'
            'Disallow root login remotely\? \[Y/n\]': 'n'
            'Remove test database and access to it\? \[Y/n\]': 'n'
            'Reload privilege tables now\? \[Y/n\]': 'y'
      
    - name: create mariaDB user
      mysql_user:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        name: '{{ ansible_user }}'
        host: '%'
        password: "abcd"
        priv: '*.*:ALL'
        state: present

    - name: enable remote login
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^bind-address'
        line: '#bind-address = 127.0.0.1'
      

    ## SETUP KAFKA
    - name: check if kafka folder is present
      stat: path="{{ home_dir }}/kafka/bin"
      register: kafka

    - name: Download and unzip Kafka if not present
      unarchive:
        src: https://apachemirror.sg.wuchna.com/kafka/2.8.0/kafka_2.12-2.8.0.tgz  
        dest: "{{ home_dir }}/kafka"
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: kafka.stat.exists == False

    - name: edit zookeeper config dataDir
      lineinfile:
        path: "{{ home_dir }}/kafka/config/zookeeper.properties"
        regexp: '^dataDir='
        line: dataDir={{ home_dir }}/kafka/data/zookeeper

    - name: edit server config listeners
      lineinfile:
        path: "{{ home_dir }}/kafka/config/server.properties"
        regexp: '^listeners='
        line: listeners=PLAINTEXT://127.0.0.1:9092

    - name: edit server config log.dirs
      lineinfile:
        path: "{{ home_dir }}/kafka/config/server.properties"
        regexp: '^log.dirs='
        line: log.dirs={{ home_dir }}/kafka/data/kafka

    ## CONFIGURE ZOOKEEPER SERVICE
    - name: Copy the zookeeper.service file
      template: 
        src: zookeeper.txt
        dest: /etc/systemd/system/zookeeper.service
        backup: no

    - name: set User
      lineinfile:
        path: "/etc/systemd/system/zookeeper.service"
        regexp: '^User\='
        line: 'User={{ ansible_user }}'

    - name: set zookeeper executable
      lineinfile:
        path: "/etc/systemd/system/zookeeper.service"
        regexp: 'ExecStart\='
        line: "ExecStart={{ home_dir }}/kafka/bin/zookeeper-server-start.sh {{ home_dir }}/kafka/config/zookeeper.properties"

    - name: set zookeeper stop executable
      lineinfile:
        path: "/etc/systemd/system/zookeeper.service"
        regexp: 'ExecStop\='
        line: "ExecStop={{ home_dir }}/kafka/bin/zookeeper-server-stop.sh"

    - name: Restart zookeeper and enable service at startup
      systemd:
        state: started
        enabled: yes
        daemon_reload: yes
        name: zookeeper

    ## CONFIGURE KAFKA SERVICE
    - name: Copy the kafka.service file
      template: 
        src: kafka.txt
        dest: /etc/systemd/system/kafka.service
        backup: no

    - name: set User
      lineinfile:
        path: "/etc/systemd/system/kafka.service"
        regexp: '^User\='
        line: 'User={{ ansible_user }}'

    - name: set kafka executable
      lineinfile:
        path: "/etc/systemd/system/kafka.service"
        regexp: 'ExecStart\='
        line: "ExecStart=/bin/sh -c '{{ home_dir }}/kafka/bin/kafka-server-start.sh {{ home_dir }}/kafka/config/server.properties > {{ home_dir }}/kafka/kafka.log 2>&1'"

    - name: set kafka stop executable
      lineinfile:
        path: "/etc/systemd/system/kafka.service"
        regexp: 'ExecStop\='
        line: "ExecStop={{ home_dir }}/kafka/bin/kafka-server-stop.sh'"

    - name: Restart kafka and enable service at startup
      systemd:
        state: started
        enabled: yes
        daemon_reload: yes
        name: kafka

    ## SPARK
    - name: check if spark folder is present
      stat: path="{{ home_dir }}/spark/bin"
      register: spark

    - name: Download and unzip spark if not present
      unarchive:
        src: https://ftp.cixug.es/apache/spark/spark-3.1.1/spark-3.1.1-bin-hadoop3.2.tgz
        dest: "{{ home_dir }}/spark"
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: spark.stat.exists == False

    - name: Copy the jupyter kernel.json file
      template: 
        src: kernel.json
        dest: "{{ home_dir }}/archiconda3/envs/streaming/share/jupyter/kernels/python3/kernel.json"
        backup: no

    - name: set spark_home
      lineinfile:
        path: "{{ home_dir }}/archiconda3/envs/streaming/share/jupyter/kernels/python3/kernel.json"
        regexp: '^ "env"\: \{"SPARK_HOME"\:""\}'
        line: ' "env": {"SPARK_HOME":"{{ home_dir }}/spark"}'

    ## INSTALL SUPERSET
    - name: check if superset environment is present
      stat: path={{ home_dir }}/archiconda3/envs/superset/bin/python
      register: superset

    - name: setup superset conda-env
      expect:
        command: "{{ home_dir }}/archiconda3/bin/conda create --name superset python=3.7.1"
        responses:
            'Proceed': 'y'
        timeout: 36000
      when: superset.stat.exists == False

    - name: install pandas (conda-forge)
      expect:
        command: "{{ home_dir }}/archiconda3/bin/conda install --name superset -c conda-forge pandas==1.2.4"
        responses:
            'Proceed': 'y'
        timeout: 36000
      when: superset.stat.exists == False

    - name: install pyarrow (conda-forge)
      expect:
        command: "{{ home_dir }}/archiconda3/bin/conda install --name superset -c conda-forge pyarrow==3.0.0"
        responses:
            'Proceed': 'y'
        timeout: 36000
      when: superset.stat.exists == False

    - name: upgrade pip
      pip: 
        name: pip
        executable: "{{ home_dir }}/archiconda3/envs/superset/bin/pip"
        state: latest
    
    - name: install superset
      pip: 
        name: "{{ item }}"
        executable: "{{ home_dir }}/archiconda3/envs/superset/bin/pip"
      loop:
        - setuptools
        - mysqlclient
        - PyJWT
        - apache-superset

    ### SETUP SUPERSET USERS
    - name: setup superset
      become: yes
      become_user: '{{ ansible_user }}'
      shell: "source {{ home_dir }}/archiconda3/bin/activate superset && {{ item }}"
      args:
        executable: /bin/bash
      loop: 
        - "superset db upgrade"
        - "export FLASK_APP=superset && superset fab create-admin --username {{ ansible_user }} --firstname Maximilian --lastname Pichler --email {{ ansible_user }}@{{ ansible_user }}.com --password abcd"
        - "export FLASK_APP=superset && superset init"

    ## CONFIGURE SUPERSET SERVICE
    - name: Copy the superset.service file
      template: 
        src: superset.txt
        dest: /etc/systemd/system/superset.service
        backup: no
    
    - name: set User
      lineinfile:
        path: "/etc/systemd/system/superset.service"
        regexp: '^User\='
        line: 'User={{ ansible_user }}'

    - name: set superset WorkingDirectory
      lineinfile:
        path: "/etc/systemd/system/superset.service"
        regexp: 'WorkingDirectory\='
        line: 'WorkingDirectory={{ home_dir }}'

    - name: set PATH
      lineinfile:
        path: "/etc/systemd/system/superset.service"
        regexp: '^Environment\='
        line: 'Environment="PATH={{ ansible_env.PATH }}:{{ home_dir }}/archiconda3/envs/superset/bin"'

    - name: set superset executable
      lineinfile:
        path: "/etc/systemd/system/superset.service"
        regexp: 'ExecStart\='
        line: 'ExecStart={{ home_dir }}/archiconda3/envs/superset/bin/superset run -h 0.0.0.0  -p 8088 --reload --debugger'

    - name: Restart superset and enable service at startup
      systemd:
        state: restarted
        enabled: yes
        daemon_reload: yes
        name: superset

    # SET PERMISSIONS #
    ###################################################################################################################  
    - name: set "{{ ansible_user }}" as owner
      file: 
        dest: "{{ home_dir }}"
        owner: "{{ ansible_user }}" 
        group: "{{ ansible_user }}" 
        recurse: yes
      notify: reboot

    - name: reboot
      reboot:

  handlers:
    - name: reboot
      reboot:
